import flash.display.Sprite;
import flash.geom.Point;
import flash.events.MouseEvent;

splashScreenGroup.skullButtonStart.addEventListener(MouseEvent.CLICK,startGame);

var time:Number = 0;
var timerPaused:Boolean = true;

var leftKeyDown:Boolean = false;
var upKeyDown:Boolean = false;
var rightKeyDown:Boolean = false;
var downKeyDown:Boolean = false;
//the main character's speed
var mainSpeed:Number = 7;
var speedMultiplier:Number = 1;
 //whether or not the main guy is jumping
var mainJumping:Boolean = false;
var mainOnGround:Boolean = false;
var mainTouchingBlockBelow = false;
var mainTouchingBlockAbove:Boolean = false;
var mainTouchingBlockLeft:Boolean = false;
var mainTouchingBlockRight:Boolean = false;
var mainFalling:Boolean = false;
var mainOnSwitch:Boolean = false;
var mainFacingDirection:int = 1; //-1 = left 1 = right
var mainIsPaused:Boolean = false;
var amtOfKeys = 0; //amount of keys the player has
//how quickly should the jump start off
var jumpSpeedLimit:int = 15;
//the current speed of the jump;
var jumpSpeed:Number = jumpSpeedLimit;
//the direction of gravity. -1 = normal
var gravityCoefficient:Number = -1;
//adding a listener to mcMain which will make it move
//based on the key strokes that are down
//ITEM VARIABLES
var hasBurrow = false;
//LEVEL VARIABLES
//the current lvl
var currentLevel:int = 0;
var currentLevelTemp:int = 0;
var X0:String = 'MAIN';
var B0:String = 'Block';
var BK:String = 'Block_Key';
var E0:String = 'Exit';
var S0:String = 'Switch';
var S1:String = 'SwitchCeiling';
var T0:String = 'ToggleBlockSolid';
var T1:String = 'ToggleBlockPhase';
var WR:String = 'WireRed';
var P0:String = 'PowerUpBurrow';
var P1:String = 'PowerUpGravity';
var IK:String = 'Item_Key';
var Z0:String = 'SecretExit';
var D0:String = 'Decoration_Scaffold';
var D1:String = 'Decoration_Sconce';
var blockHolder:Sprite = new Sprite();
var playerHolder:Sprite = new Sprite();
var decorHolder:Sprite = new Sprite();
var lightHolder:Sprite = new Sprite();
var uiHolder:Sprite = new Sprite();
var splashHolder:Sprite = new Sprite();
//load order lower down = in front
addChild( decorHolder );
addChild( blockHolder );
addChild( playerHolder );
addChild( lightHolder );
addChild( timerField );
addChild( keyCountField );
addChild( uiHolder );
addChild( splashHolder );
//end load order
splashHolder.addChild( splashScreenGroup );
var main:Character = new Character();
main.name = "main";
playerHolder.addChild( main );
var mcMain:DisplayObject = playerHolder.getChildByName("main");
trace( mcMain );
var pointsToRebuild:Array;
var indexToRebuild:Array;
var indexToRebuildTemp:Array;
//the array for level 1
const lvlArray:Array = new Array();
var lvlArrayTemp:Array;
var lastLevel:int = 8; //the level # of the last level, used in stopping the timer
lvlArray[ 0 ] = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17];
//nameOfArray[ level# ][ row ] = [ all types in each row ]
lvlArray[0][ 0 ] = [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
lvlArray[0][ 1 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,D0,00,00,B0]
lvlArray[0][ 2 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,D0,00,00,B0]
lvlArray[0][ 3 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,WR,00,00,00,00,00,D0,00,00,B0]
lvlArray[0][ 4 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,WR,00,00,00,00,D0,00,00,B0]
lvlArray[0][ 5 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,WR,00,00,WR,D0,00,00,B0]
lvlArray[0][ 6 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,WR,00,WR,D0,00,00,B0]
lvlArray[0][ 7 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,WR,WR,D0,00,00,B0]
lvlArray[0][ 8 ] = [B0,00,00,D1,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,WR,WR,WR,WR,D0,00,00,B0]
lvlArray[0][ 9 ] = [00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,D0,00,00,00]
lvlArray[0][ 10] = [00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,D0,E0,00,00]
lvlArray[0][ 11] = [B0,B0,00,00,00,B0,B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0,B0,B0,B0,B0]
lvlArray[0][ 12] = [B0,00,00,00,00,D0,D0,00,00,00,00,B0,B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,D0,00,00,B0]
lvlArray[0][ 13] = [B0,00,00,00,00,D0,D0,00,00,00,00,B0,B0,B0,B0,00,00,00,00,00,00,00,00,00,00,00,00,00,D0,00,00,B0]
lvlArray[0][ 14] = [00,00,00,00,00,D0,D0,00,00,00,00,B0,B0,B0,B0,B0,B0,00,00,00,00,00,D1,00,00,00,00,00,D0,00,00,00]
lvlArray[0][ 15] = [00,00,00,00,00,D0,D0,00,00,00,00,B0,B0,B0,B0,B0,B0,B0,B0,00,00,00,00,00,00,00,00,00,D0,00,00,00]
lvlArray[0][ 16] = [00,00,00,00,00,D0,D0,00,00,00,00,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,00,00,00,00,00,00,00,D0,X0,00,00]
lvlArray[0][ 17] = [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]

lvlArray[ 1 ] = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17];
//nameOfArray[ level# ][ row ] = [ all types in each row ]
lvlArray[1][ 0 ] = [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
lvlArray[1][ 1 ] = [B0,00,00,D0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[1][ 2 ] = [B0,00,00,D0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[1][ 3 ] = [00,00,D1,D0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00]
lvlArray[1][ 4 ] = [00,00,00,D0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00]
lvlArray[1][ 5 ] = [00,00,00,D0,E0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00]
lvlArray[1][ 6 ] = [B0,B0,B0,B0,B0,B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0,00,00,00,00,B0]
lvlArray[1][ 7 ] = [B0,00,D0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0,B0,00,00,00,00,D0,00,00,00,00,B0]
lvlArray[1][ 8 ] = [B0,00,D0,00,00,00,00,00,00,00,00,D1,00,00,00,00,00,00,00,00,D0,D0,00,D1,00,00,D0,00,00,00,00,B0]
lvlArray[1][ 9 ] = [00,D1,D0,00,00,00,00,00,00,00,00,00,00,00,B0,B0,00,00,00,00,D0,D0,00,00,00,00,D0,00,00,00,00,00]
lvlArray[1][ 10] = [00,00,D0,00,00,00,00,00,00,00,00,00,00,00,D0,D0,00,00,00,00,D0,D0,00,00,00,00,D0,00,00,00,00,00]
lvlArray[1][ 11] = [00,00,D0,00,00,00,00,00,00,00,00,00,00,00,D0,D0,00,00,00,00,D0,D0,00,00,00,00,D0,00,00,00,00,00]
lvlArray[1][ 12] = [B0,B0,B0,B0,00,00,00,00,B0,B0,00,00,00,00,D0,D0,00,00,00,00,D0,D0,00,00,00,00,D0,00,00,00,00,B0]
lvlArray[1][ 13] = [B0,B0,B0,B0,00,00,00,00,D0,D0,00,00,00,00,D0,D0,00,00,00,00,D0,D0,00,00,00,00,B0,B0,00,00,00,B0]
lvlArray[1][ 14] = [00,00,00,B0,00,00,00,00,D0,D0,00,00,00,00,D0,D0,00,00,00,00,D0,D0,00,00,00,00,D0,D0,00,00,00,00]
lvlArray[1][ 15] = [00,00,00,B0,00,00,00,00,D0,D0,00,00,00,00,D0,D0,00,00,00,00,D0,D0,00,00,00,00,D0,D0,00,00,00,00]
lvlArray[1][ 16] = [00,X0,00,B0,00,00,00,00,D0,D0,00,00,00,00,D0,D0,00,00,00,00,D0,D0,00,00,00,00,D0,D0,00,00,00,00]
lvlArray[1][ 17] = [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]

lvlArray[ 2 ] = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17];
//nameOfArray[ level# ][ row ] = [ all types in each row ]
lvlArray[2][ 0 ] = [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
lvlArray[2][ 1 ] = [00,00,00,00,B0,00,00,00,00,00,00,00,00,00,B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00]
lvlArray[2][ 2 ] = [00,00,00,00,B0,00,00,00,00,00,00,00,00,00,B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00]
lvlArray[2][ 3 ] = [00,00,X0,00,B0,00,00,00,00,00,00,D1,00,00,B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00]
lvlArray[2][ 4 ] = [B0,B0,B0,B0,B0,00,00,00,00,00,00,00,00,00,B0,00,00,00,00,00,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
lvlArray[2][ 5 ] = [B0,B0,B0,B0,B0,B0,B0,B0,00,00,00,00,00,00,B0,00,00,00,00,00,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
lvlArray[2][ 6 ] = [B0,00,00,00,00,00,00,B0,00,00,00,00,00,00,B0,00,00,D1,00,00,B0,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[2][ 7 ] = [B0,00,00,00,00,00,00,B0,00,00,00,00,00,00,B0,00,00,00,00,00,B0,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[2][ 8 ] = [B0,B0,B0,B0,B0,B0,B0,B0,00,00,00,B0,00,00,B0,00,00,P0,00,00,B0,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[2][ 9 ] = [B0,00,00,B0,B0,B0,B0,B0,00,00,00,00,00,00,B0,00,00,00,00,00,B0,00,00,00,00,00,00,D1,00,00,00,B0]
lvlArray[2][ 10] = [B0,00,00,00,00,00,B0,B0,B0,00,00,00,00,00,B0,B0,B0,B0,B0,B0,B0,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[2][ 11] = [B0,00,00,00,00,00,B0,B0,B0,B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[2][ 12] = [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0,B0,B0,B0,B0]
lvlArray[2][ 13] = [B0,B0,B0,B0,00,00,00,00,00,B0,B0,B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0,B0,B0,B0,B0]
lvlArray[2][ 14] = [00,00,00,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0,00,00,00,00]
lvlArray[2][ 15] = [00,00,00,B0,B0,B0,B0,B0,00,B0,B0,B0,B0,B0,00,00,00,00,00,00,00,00,00,00,00,00,00,B0,00,00,00,00]
lvlArray[2][ 16] = [00,00,00,00,00,00,00,00,00,B0,B0,B0,B0,B0,B0,00,00,00,00,00,00,00,00,00,00,00,00,B0,00,E0,00,00]
lvlArray[2][ 17] = [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]

lvlArray[ 3 ] = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17];
//nameOfArray[ level# ][ row ] = [ all types in each row ]
lvlArray[3][ 0 ] = [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
lvlArray[3][ 1 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0,00,00,00,00,00,00,00,00,00,B0,B0]
lvlArray[3][ 2 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0,00,00,00,00,00,00,00,00,D1,B0,B0]
lvlArray[3][ 3 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0,00,00,00,00,00,00,00,00,00,B0,B0]
lvlArray[3][ 4 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0,00,00,00,00,00,00,00,B0,00,B0,B0]
lvlArray[3][ 5 ] = [B0,00,00,00,00,00,00,00,00,D1,00,00,00,00,00,00,00,00,D1,00,B0,00,00,00,00,00,00,00,B0,00,B0,B0]
lvlArray[3][ 6 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0,00,00,00,00,B0,00,00,B0,00,B0,B0]
lvlArray[3][ 7 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,B0,00,00,00,00,00,00,00,00,00,00,00,00,D0,00,00,D0,00,00,B0]
lvlArray[3][ 8 ] = [B0,00,00,00,00,B0,B0,00,00,00,00,00,D0,00,00,00,B0,00,00,00,00,00,00,00,00,D0,00,00,D0,00,00,B0]
lvlArray[3][ 9 ] = [B0,00,00,00,00,D0,D0,00,00,00,00,00,D0,00,00,00,D0,00,00,00,00,00,B0,00,00,D0,00,00,D0,00,00,B0]
lvlArray[3][ 10] = [B0,00,00,00,00,D0,D0,00,00,00,B0,00,D0,00,00,00,D0,00,00,00,00,00,D0,00,00,D0,00,00,D0,00,00,B0]
lvlArray[3][ 11] = [B0,X0,00,00,00,D0,D0,00,00,00,D0,00,D0,00,00,00,D0,00,B0,00,00,00,D0,00,00,D0,00,00,D0,00,00,B0]
lvlArray[3][ 12] = [B0,B0,B0,00,00,D0,D0,00,00,00,D0,00,D0,00,00,00,D0,00,D0,00,00,00,D0,00,00,D0,00,00,D0,P0,00,B0]
lvlArray[3][ 13] = [B0,B0,B0,00,00,D0,D0,00,00,00,D0,00,D0,00,00,00,D0,00,D0,00,00,00,D0,00,00,D0,B0,B0,B0,B0,B0,B0]
lvlArray[3][ 14] = [B0,B0,B0,00,00,D0,D0,00,00,00,D0,00,D0,00,00,00,D0,00,D0,00,00,00,D0,00,00,D0,B0,B0,B0,00,B0,B0]
lvlArray[3][ 15] = [B0,B0,B0,00,00,D0,D0,00,00,00,D0,00,D0,00,00,00,D0,00,D0,00,00,00,D0,00,00,D0,B0,00,00,00,00,B0]
lvlArray[3][ 16] = [B0,B0,B0,B0,00,D0,D0,00,00,00,D0,00,D0,00,00,00,D0,00,D0,00,00,00,D0,00,00,D0,B0,00,E0,00,00,B0]
lvlArray[3][ 17] = [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]


lvlArray[ 4 ] = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17];
//nameOfArray[ level# ][ row ] = [ all types in each row ]
lvlArray[4][ 0 ] = [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
lvlArray[4][ 1 ] = [00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0,00,00,00,00,00,00,00,00,00,00,B0,00,00,00]
lvlArray[4][ 2 ] = [00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0,00,00,00,00,00,00,00,00,00,00,B0,00,00,00]
lvlArray[4][ 3 ] = [B0,B0,B0,B0,B0,B0,B0,00,00,00,00,00,B0,00,00,00,00,B0,00,00,00,00,00,00,00,00,00,00,B0,00,B0,B0]
lvlArray[4][ 4 ] = [00,00,00,00,00,00,00,B0,B0,B0,00,00,D0,00,00,00,00,B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00]
lvlArray[4][ 5 ] = [00,00,00,00,00,00,00,00,00,00,00,00,D0,00,00,B0,00,B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00]
lvlArray[4][ 6 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,D0,00,00,D0,00,B0,00,00,00,00,00,B0,00,00,00,00,00,00,00,B0]
lvlArray[4][ 7 ] = [B0,00,00,00,D1,00,00,00,00,00,00,00,D0,00,00,D0,00,B0,00,00,D1,00,00,B0,00,00,00,00,00,00,00,B0]
lvlArray[4][ 8 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,D0,00,00,D0,00,B0,00,00,00,00,00,B0,00,00,00,00,00,00,00,B0]
lvlArray[4][ 9 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,B0,00,00,D0,00,B0,00,00,P0,00,00,B0,00,00,B0,00,00,00,00,B0]
lvlArray[4][ 10] = [B0,B0,B0,B0,00,00,00,00,B0,00,00,00,D0,00,00,D0,00,B0,00,00,00,00,00,B0,00,00,00,00,00,00,00,B0]
lvlArray[4][ 11] = [B0,B0,B0,B0,B0,00,00,00,D0,00,00,00,D0,00,00,D0,00,B0,B0,B0,B0,B0,B0,B0,00,00,00,00,B0,B0,B0,B0]
lvlArray[4][ 12] = [B0,00,00,00,B0,00,00,00,D0,00,00,00,D0,00,00,D0,00,00,D0,00,00,00,D0,00,00,00,00,00,B0,00,B0,B0]
lvlArray[4][ 13] = [00,00,E0,00,B0,00,00,00,D0,00,00,00,D0,00,00,D0,00,00,D0,00,00,00,D0,00,00,00,00,00,B0,00,00,00]
lvlArray[4][ 14] = [B0,B0,B0,B0,B0,00,00,00,D0,00,00,00,D0,00,00,D0,00,00,D0,00,00,00,D0,00,00,00,00,00,B0,B0,B0,B0]
lvlArray[4][ 15] = [00,00,00,00,B0,00,00,00,D0,00,00,00,D0,00,00,D0,00,00,D0,00,00,00,D0,00,00,00,B0,00,B0,B0,00,00]
lvlArray[4][ 16] = [00,00,X0,00,B0,00,00,00,D0,00,00,00,D0,00,00,D0,00,00,D0,00,00,00,D0,00,00,00,D0,00,00,00,00,00]
lvlArray[4][ 17] = [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]

lvlArray[ 5 ] = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17];
//nameOfArray[ level# ][ row ] = [ all types in each row ]
lvlArray[5][ 0 ] = [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
lvlArray[5][ 1 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[5][ 2 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[5][ 3 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[5][ 4 ] = [00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,D1,00,00,00,00,00,00,00,00,00,00,00,00,00]
lvlArray[5][ 5 ] = [00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00]
lvlArray[5][ 6 ] = [00,WR,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,E0,00,00,00]
lvlArray[5][ 7 ] = [B0,T0,WR,00,00,00,00,00,00,D1,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0,B0,B0,B0,B0]
lvlArray[5][ 8 ] = [B0,00,T0,WR,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,WR,00,00,00,00,00,00,00,D0,00,00,B0]
lvlArray[5][ 9 ] = [B0,00,00,T0,WR,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,S0,00,00,00,00,00,00,00,D0,00,00,B0]
lvlArray[5][ 10] = [B0,00,00,00,T0,WR,00,00,00,00,00,00,00,00,00,00,B0,00,00,00,B0,00,00,00,00,00,00,00,D0,00,00,B0]
lvlArray[5][ 11] = [B0,00,00,00,00,T0,WR,00,00,00,00,00,00,00,00,00,D0,00,00,00,D0,00,00,00,00,00,00,00,D0,00,00,B0]
lvlArray[5][ 12] = [B0,00,00,00,00,00,T0,WR,00,00,00,00,B0,00,00,00,D0,00,00,00,D0,00,00,00,00,00,00,00,D0,00,00,B0]
lvlArray[5][ 13] = [B0,00,00,00,00,00,00,T0,B0,00,00,00,D0,00,00,00,D0,00,00,00,D0,00,00,00,00,00,00,00,D0,00,00,B0]
lvlArray[5][ 14] = [B0,00,00,00,00,00,00,00,B0,00,00,00,D0,00,00,00,D0,00,00,00,D0,00,00,00,00,00,00,00,D0,00,00,B0]
lvlArray[5][ 15] = [B0,00,00,00,00,00,WR,00,B0,00,00,00,D0,00,00,00,D0,00,00,00,D0,00,00,00,00,00,00,00,D0,00,00,B0]
lvlArray[5][ 16] = [B0,00,00,X0,00,00,S0,00,B0,00,00,00,D0,00,00,00,D0,00,00,00,D0,00,00,00,00,00,00,00,D0,00,00,B0]
lvlArray[5][ 17] = [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]

lvlArray[ 6 ] = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17];
//nameOfArray[ level# ][ row ] = [ all types in each row ]
lvlArray[6][ 0 ] = [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
lvlArray[6][ 1 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0,00,00,00,00,00,B0]
lvlArray[6][ 2 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0,00,00,00,00,00,B0]
lvlArray[6][ 3 ] = [00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0,00,00,00,00,00,B0]
lvlArray[6][ 4 ] = [00,00,WR,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0,00,00,00,00,00,B0]
lvlArray[6][ 5 ] = [00,00,S0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0,00,00,00,00,00,B0]
lvlArray[6][ 6 ] = [B0,B0,B0,B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0,00,00,X0,00,B0,B0]
lvlArray[6][ 7 ] = [B0,00,00,00,00,00,00,00,00,00,B0,00,00,00,00,00,B0,00,00,00,00,00,00,00,00,B0,00,B0,B0,B0,B0,B0]
lvlArray[6][ 8 ] = [B0,00,00,00,00,00,00,00,00,00,D0,00,00,00,00,00,00,00,00,00,00,00,00,D1,00,B0,00,B0,00,00,00,B0]
lvlArray[6][ 9 ] = [B0,00,00,00,00,00,00,00,00,00,D0,00,00,00,00,00,00,00,00,00,B0,00,00,00,00,00,00,B0,00,00,00,B0]
lvlArray[6][ 10] = [B0,00,00,00,00,00,B0,00,00,00,D0,00,00,00,00,00,00,00,00,00,D0,00,00,00,00,00,00,B0,00,E0,00,B0]
lvlArray[6][ 11] = [B0,00,00,00,00,00,D0,00,00,00,D0,00,00,00,00,00,00,00,00,00,D0,00,00,00,00,00,00,B0,B0,B0,B0,B0]
lvlArray[6][ 12] = [B0,00,00,D1,00,00,D0,00,00,00,D0,00,00,00,WR,WR,WR,00,00,00,D0,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[6][ 13] = [B0,00,00,00,00,00,D0,00,00,00,D0,00,00,B0,T0,T0,T0,B0,00,00,D0,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[6][ 14] = [B0,00,00,00,00,00,D0,00,00,00,D0,00,00,B0,00,00,00,B0,00,00,D0,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[6][ 15] = [B0,00,00,00,00,00,D0,00,00,00,D0,00,00,B0,00,P0,00,B0,00,00,D0,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[6][ 16] = [B0,00,00,00,00,00,D0,00,00,00,D0,00,00,B0,00,00,00,B0,00,00,D0,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[6][ 17] = [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]

lvlArray[ 7 ] = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17];
//nameOfArray[ level# ][ row ] = [ all types in each row ]
lvlArray[7][ 0 ] = [Z0,B0,B0,B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[7][ 1 ] = [B0,B0,B0,B0,00,00,00,WR,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[7][ 2 ] = [B0,00,00,B0,00,00,00,S0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[7][ 3 ] = [00,00,00,B0,00,00,00,B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,WR]
lvlArray[7][ 4 ] = [00,E0,00,B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,T0]
lvlArray[7][ 5 ] = [B0,B0,B0,B0,B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[7][ 6 ] = [B0,B0,B0,B0,B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,WR,WR,WR,WR,WR,WR,WR,WR,WR,B0]
lvlArray[7][ 7 ] = [00,WR,00,B0,B0,00,00,00,00,00,00,00,00,00,00,00,00,00,B0,B0,B0,B0,T0,T0,T0,T0,T0,T0,T0,T0,T0,00]
lvlArray[7][ 8 ] = [00,S0,00,B0,B0,00,B0,00,00,00,00,00,00,00,00,00,00,00,B0,B0,B0,B0,00,00,00,00,00,00,00,00,00,00]
lvlArray[7][ 9 ] = [B0,B0,B0,B0,B0,00,00,00,00,00,00,00,00,00,00,00,00,00,B0,B0,WR,WR,00,00,00,00,00,00,00,00,00,B0]
lvlArray[7][ 10] = [B0,00,00,00,00,00,00,00,00,00,B0,00,00,00,00,00,00,00,B0,00,S0,T1,00,00,00,00,00,00,00,00,00,B0]
lvlArray[7][ 11] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,B0,B0,B0,00,B0,B0,B0,B0,00,00,00,00,00,00,00,00,00,B0]
lvlArray[7][ 12] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,B0,B0,B0,00,00,00,B0,B0,00,00,00,00,00,00,00,00,00,B0]
lvlArray[7][ 13] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,B0,B0,B0,00,00,B0,B0,B0,00,00,00,00,00,00,00,00,00,B0]
lvlArray[7][ 14] = [B0,00,X0,00,00,00,00,00,00,00,00,00,00,00,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,00,00,00,00,00,00,B0]
lvlArray[7][ 15] = [B0,B0,B0,B0,00,00,WR,00,00,00,00,00,00,00,B0,WR,B0,B0,B0,B0,B0,B0,B0,B0,B0,00,00,00,P0,00,00,B0]
lvlArray[7][ 16] = [00,00,00,B0,00,00,S0,00,00,00,00,00,00,00,00,T0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[7][ 17] = [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]

lvlArray[ 8 ] = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17];
//nameOfArray[ level# ][ row ] = [ all types in each row ]
lvlArray[8][ 0 ] = [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
lvlArray[8][ 1 ] = [B0,00,00,00,00,00,B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0,00,00,D0,00,00,B0,00,00,00,B0]
lvlArray[8][ 2 ] = [B0,00,00,00,00,00,BK,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0,00,00,D0,00,00,00,00,00,00,B0]
lvlArray[8][ 3 ] = [B0,00,00,00,00,00,B0,B0,B0,B0,B0,00,00,00,00,00,00,00,00,00,00,B0,00,00,D0,00,00,B0,B0,00,00,B0]
lvlArray[8][ 4 ] = [B0,WR,00,X0,00,00,B0,00,00,00,B0,00,00,00,00,00,00,00,00,00,D1,B0,00,00,D0,00,00,B0,00,00,00,B0]
lvlArray[8][ 5 ] = [B0,T0,B0,B0,B0,WR,B0,00,00,00,B0,00,00,00,00,00,00,00,00,00,00,00,00,00,D0,00,00,B0,00,00,B0,B0]
lvlArray[8][ 6 ] = [B0,B0,B0,B0,B0,S0,B0,00,00,00,B0,B0,00,00,00,B0,00,00,00,00,00,00,00,B0,B0,B0,B0,B0,00,00,00,B0]
lvlArray[8][ 7 ] = [B0,00,00,00,B0,00,B0,00,00,00,00,B0,00,00,00,D0,00,00,00,00,00,00,00,B0,B0,B0,B0,B0,B0,00,00,B0]
lvlArray[8][ 8 ] = [B0,00,00,00,B0,00,00,00,00,00,00,B0,00,00,00,D0,00,00,00,00,00,P0,00,B0,00,00,00,B0,00,00,00,B0]
lvlArray[8][ 9 ] = [B0,00,E0,00,B0,WR,B0,B0,B0,B0,00,B0,00,00,00,D0,00,00,B0,00,00,00,00,B0,00,00,IK,B0,00,D1,00,B0]
lvlArray[8][ 10] = [B0,B0,B0,B0,00,S0,00,00,D0,00,00,B0,00,00,00,D0,00,00,D0,00,00,00,00,B0,00,B0,B0,B0,00,00,B0,B0]
lvlArray[8][ 11] = [B0,B0,00,00,00,B0,00,00,D0,00,00,B0,00,00,00,D0,00,00,D0,00,00,00,00,B0,00,00,00,00,00,00,00,B0]
lvlArray[8][ 12] = [B0,B0,00,00,00,B0,00,00,D0,00,00,D0,00,00,00,D0,00,00,D0,00,00,00,00,B0,00,00,B0,B0,B0,00,00,B0]
lvlArray[8][ 13] = [B0,B0,00,00,00,B0,00,00,D0,00,00,D0,00,00,B0,D0,00,00,D0,00,00,00,00,B0,B0,00,D0,00,D0,00,00,B0]
lvlArray[8][ 14] = [B0,B0,00,00,00,B0,00,00,D0,00,00,D0,00,00,D0,D0,00,00,D0,00,00,00,00,B0,00,00,D0,00,D0,00,00,B0]
lvlArray[8][ 15] = [WR,B0,00,00,00,B0,00,00,D0,00,00,D0,00,00,D0,D0,00,00,D0,00,00,00,00,B0,00,00,D0,00,D0,00,00,B0]
lvlArray[8][ 16] = [T0,00,00,00,00,B0,00,00,D0,00,00,D0,00,00,D0,D0,00,00,D0,00,00,00,00,B0,00,00,D0,00,D0,00,00,00]
lvlArray[8][ 17] = [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]

lvlArray[ 9 ] = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17];
//nameOfArray[ level# ][ row ] = [ all types in each row ]
lvlArray[9][ 0 ] = [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
lvlArray[9][ 1 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[9][ 2 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[9][ 3 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[9][ 4 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[9][ 5 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[9][ 6 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[9][ 7 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[9][ 8 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[9][ 9 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[9][ 10] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[9][ 11] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[9][ 12] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[9][ 13] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0,B0,B0,B0,00,00,00,00,00,B0]
lvlArray[9][ 14] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0,B0,B0,B0,B0,B0,B0,00,00,00,00,B0]
lvlArray[9][ 15] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0,B0,B0,00,00,00,B0,00,00,00,00,B0]
lvlArray[9][ 16] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,X0,00,00,00,00,00,BK,BK,BK,00,E0,00,B0,00,00,00,00,B0]
lvlArray[9][ 17] = [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]

lvlArray[ 10 ] = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17];
//nameOfArray[ level# ][ row ] = [ all types in each row ]
lvlArray[10][ 0 ] = [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
lvlArray[10][ 1 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[10][ 2 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[10][ 3 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[10][ 4 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[10][ 5 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[10][ 6 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[10][ 7 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[10][ 8 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[10][ 9 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[10][ 10] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[10][ 11] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[10][ 12] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[10][ 13] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[10][ 14] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[10][ 15] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[10][ 16] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[10][ 17] = [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]

lvlArray[ 11 ] = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17];
//nameOfArray[ level# ][ row ] = [ all types in each row ]
lvlArray[11][ 0 ] = [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
lvlArray[11][ 1 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[11][ 2 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[11][ 3 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[11][ 4 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[11][ 5 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[11][ 6 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[11][ 7 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[11][ 8 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[11][ 9 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[11][ 10] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[11][ 11] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[11][ 12] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[11][ 13] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[11][ 14] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[11][ 15] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[11][ 16] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[11][ 17] = [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]

lvlArray[ 100 ] = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17];
//nameOfArray[ level# ][ row ] = [ all types in each row ]
lvlArray[100][ 0 ] = [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
lvlArray[100][ 1 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[100][ 2 ] = [B0,00,00,00,B0,B0,00,B0,B0,00,00,B0,00,B0,B0,00,00,B0,B0,00,B0,B0,B0,00,00,00,00,00,00,00,00,B0]
lvlArray[100][ 3 ] = [B0,00,00,00,B0,00,00,B0,00,00,B0,00,00,B0,00,B0,00,B0,00,00,00,B0,00,00,00,00,00,00,00,00,00,B0]
lvlArray[100][ 4 ] = [B0,00,00,00,B0,B0,00,B0,B0,00,B0,00,00,B0,B0,00,00,B0,B0,00,00,B0,00,00,00,00,00,00,00,00,00,B0]
lvlArray[100][ 5 ] = [B0,00,00,00,00,B0,00,B0,00,00,B0,00,00,B0,00,B0,00,B0,00,00,00,B0,00,00,00,00,00,00,00,00,00,B0]
lvlArray[100][ 6 ] = [B0,00,00,00,B0,B0,00,B0,B0,00,00,B0,00,B0,00,B0,00,B0,B0,00,00,B0,00,00,00,00,00,00,00,00,00,B0]
lvlArray[100][ 7 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[100][ 8 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[100][ 9 ] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[100][ 10] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[100][ 11] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[100][ 12] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[100][ 13] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[100][ 14] = [B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[100][ 15] = [B0,00,00,00,X0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,B0]
lvlArray[100][ 16] = [B0,00,00,B0,B0,B0,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,E0,00,00,B0]
lvlArray[100][ 17] = [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
mcMain.addEventListener(Event.ENTER_FRAME, moveChar);
function moveChar(event:Event):void{
	if( timerPaused == false )
	{
		time += 0.041666666666;
		timerField.text = time.toFixed( 2 ) + "s";
	}
	//if certain keys are down then move the character
	if( leftKeyDown == true && mcMain.scaleX == 1)//if main if facing left, look left
	{
			mcMain.scaleX = -1;
			playerHolder.x += mcMain.width;
	}
	if( rightKeyDown == true && mcMain.scaleX == -1)//if main if facing right, look right
	{
		mcMain.scaleX = 1;
		playerHolder.x -= mcMain.width;
	}
	if(leftKeyDown && mainTouchingBlockLeft == false ){
		mcMain.x -= mainSpeed * speedMultiplier;
	}
	if(rightKeyDown && mainTouchingBlockRight == false ){
		mcMain.x += mainSpeed * speedMultiplier;
	}
	if( mainJumping == true )//when main jumps, do a jump animation
	{
		main.gotoAndStop( 7 );
	}
	else if( rightKeyDown == true || leftKeyDown == true )// if not, but moving, continue running animation
	{
		main.play();
	}
	else
	{
		main.gotoAndStop(1);
	}
	if( mainTouchingBlockAbove == false && upKeyDown || mainJumping == true ){
		mainJump();
	}
	if( mcMain.x < -10 )//if main goes of the left of the stage
	{
		mcMain.x = 800 - 10;//move main to the right of the stage
	}
	if( mcMain.x > 800 - 10 )//if main goes to the right of the stage
	{
		mcMain.x = -10;//move main to the left of the stage
	}
	for(var a:int = 0;a<blockHolder.numChildren; a++) // below
	{
		var hitBlock1:DisplayObject = blockHolder.getChildAt(a);
		if( mcMain.y == hitBlock1.y + 25 && mcMain.x > hitBlock1.x - 25 && mcMain.x < hitBlock1.x + 25 )
		{
			if( hitBlock1 + "123" == "[object Block]123" || hitBlock1 + "123" == "[object ToggleBlockSolid]123" || hitBlock + "123" == "[object Block_Key]123" )
			{
				mainTouchingBlockAbove = true;
				break;
			}
		}
		mainTouchingBlockAbove = false;
	}
	for(var b:int = 0;b<blockHolder.numChildren; b++) // above
	{
		var hitBlock2:DisplayObject = blockHolder.getChildAt(b);
		if( mcMain.y == hitBlock2.y - 25 && mcMain.x > hitBlock2.x - 25 && mcMain.x < hitBlock2.x + 25 )
		{
			if( hitBlock2 + "123" == "[object Block]123" || hitBlock2 + "123" == "[object ToggleBlockSolid]123" || hitBlock + "123" == "[object Block_Key]123" )
			{
				if( downKeyDown == true && hasBurrow == true )
				{
					attemptBurrow();
				}
				mainTouchingBlockBelow = true;
				break;
			}
		}
		mainTouchingBlockBelow = false;
	}
	for(var c:int = 0;c<blockHolder.numChildren; c++) // left
	{
		var hitBlock3:DisplayObject = blockHolder.getChildAt(c);
		if( mcMain.x == hitBlock3.x + 25 && mcMain.y < hitBlock3.y + 25 && mcMain.y > hitBlock3.y - 25 )
		{
			if( hitBlock3 + "123" == "[object Block]123" || hitBlock3 + "123" == "[object ToggleBlockSolid]123" || hitBlock + "123" == "[object Block_Key]123" )
			{
				trace( "Left" );
				mainTouchingBlockLeft = true;
				break;
			}
		}
		mainTouchingBlockLeft = false;
	}
	for(var d:int = 0;d<blockHolder.numChildren; d++) // right
	{
		var hitBlock4:DisplayObject = blockHolder.getChildAt(d);
		if( mcMain.x == hitBlock4.x - 25 && mcMain.y < hitBlock4.y + 25 && mcMain.y > hitBlock4.y - 25 )
		{
			if( hitBlock4 + "123" == "[object Block]123" || hitBlock4 + "123" == "[object ToggleBlockSolid]123" || hitBlock + "123" == "[object Block_Key]123" )
			{
				trace( "Right" );
				mainTouchingBlockRight = true;
				break;
			}
		}
		mainTouchingBlockRight = false;
	}
	for(var i:int = 0;i<blockHolder.numChildren; i++)
	{
		//getting the current block
		var hitBlock:DisplayObject = blockHolder.getChildAt(i);
		if( mcMain.hitTestObject( hitBlock ) == true && hitBlock + "123" == "[object Exit]123" && upKeyDown == true )//move to the next level after reaching the exit
		{
			if( currentLevel == lastLevel )
			{
				timerPaused = true;
			}
			destroyLevel();
			currentLevel = currentLevelTemp;
			currentLevel += 1; //adds 1 to the currentlevel
			currentLevelTemp += 1
			mainIsPaused = true;
			createLvl();
		}
		if( mcMain.hitTestObject( hitBlock ) == true && hitBlock + "123" == "[object SecretExit]123" )//move to the next level after reaching the exit
		{
			destroyLevel();
			currentLevelTemp = currentLevel;
			if( currentLevel == 7 )
			{
				currentLevel = 100;
			}
			else if( currentLevel == 9 ) //example
			{
				currentLevel = 101;
			}
			createLvl();
		}
		if( mcMain.hitTestObject( hitBlock ) == true && hitBlock + "123" == "[object PowerUpBurrow]123" )//pick up the power up
		{
			blockHolder.removeChildAt( i );
			var newPlaceholder:Placeholder = new Placeholder();
			blockHolder.addChildAt( newPlaceholder, i ); 
			hasBurrow = true;
			updateUI();
		}
		if( mcMain.hitTestObject( hitBlock ) == true && hitBlock + "123" == "[object Item_Key]123" )
		{
			blockHolder.removeChildAt( i );
			var newPlaceholder1:Placeholder = new Placeholder();
			blockHolder.addChildAt( newPlaceholder1, i );
			amtOfKeys += 1; //pick up the key
			updateUI();
		}
		if( mcMain.hitTestObject( hitBlock ) == true && hitBlock + "123" == "[object Block_Key]123" )
		{
			if( amtOfKeys > 0)
			{
				blockHolder.removeChildAt( i );
				var newPlaceholder2:Placeholder = new Placeholder();
				blockHolder.addChildAt( newPlaceholder2, i );
				amtOfKeys += -1; //remove a key from the player's inventory
				updateUI();
			}
		}
		if( mcMain.hitTestObject( hitBlock ) == true && hitBlock + "123" == "[object Switch]123" && testMainOnSwitch() == true )//activate the switch
		{
			var rebuildQuery:Boolean = false;
			pointsToRebuild = new Array();
			if( lvlArrayTemp[ currentLevel ][(int)( Math.floor( hitBlock.y / 25 ) - 1)][( int )( Math.floor( hitBlock.x / 25 ))]  == WR )
			{
				for(var o:int = 0; o < lvlArrayTemp[ currentLevel ].length; o++)
				{
					for(var k:int = 0; k < lvlArrayTemp[ currentLevel ][ o ].length; k++ )
					{
						var oPlus:int = o + 1;
						if( lvlArrayTemp[ currentLevel ][ o ][ k ] == WR && lvlArrayTemp[ currentLevel ][ oPlus ][ k ] == T0 )
						{
							rebuildQuery = true;
							pointsToRebuild.push( [oPlus, k ] );
							lvlArrayTemp[ currentLevel ][ oPlus ][ k ] = T1;
						}
						else if( lvlArrayTemp[ currentLevel ][ o ][ k ] == WR && lvlArrayTemp[ currentLevel ][ oPlus ][ k ] == T1 )
						{
							rebuildQuery = true;
						    pointsToRebuild.push( [oPlus, k ] );
							lvlArrayTemp[ currentLevel ][ oPlus ][ k ] = T0;
						}
					}
				}		
			}
			if( rebuildQuery == true )
			{
				rebuildLevelFromTemp();
			}
		}
		if( mcMain.x > hitBlock.x - 25 && mcMain.x < hitBlock.x + 25 && mcMain.y < hitBlock.y - 22 && mcMain.y > hitBlock.y - 25 )
		{
			if(  hitBlock + "123" == "[object Block]123" || hitBlock + "123" == "[object ToggleBlockSolid]123" || hitBlock + "123" == "[object Block_Key]123" )
			{
				mcMain.y = hitBlock.y - 25;
				mainTouchingBlockBelow = true;
			}
		}
		if( mcMain.x > hitBlock.x - 25 && mcMain.x < hitBlock.x - 17 && mcMain.y > hitBlock.y - 25 && mcMain.y < hitBlock.y + 25 )
		{
			if(  hitBlock + "123" == "[object Block]123" || hitBlock + "123" == "[object ToggleBlockSolid]123" || hitBlock + "123" == "[object Block_Key]123" )
			{
				mainTouchingBlockRight = true;
				mcMain.x = hitBlock.x - 25;
			}
		}
		if( mcMain.x < hitBlock.x + 25 && mcMain.x >= hitBlock.x + 17 && mcMain.y > hitBlock.y - 25 && mcMain.y < hitBlock.y + 25 )
		{
			if(  hitBlock + "123" == "[object Block]123" || hitBlock + "123" == "[object ToggleBlockSolid]123" || hitBlock + "123" == "[object Block_Key]123" )
			{
				mainTouchingBlockLeft = true;
				mcMain.x = hitBlock.x + 25;
			}	
		}
		if( mcMain.y < hitBlock.y - 17 && mcMain.y > hitBlock.y - 34 )
		{
			if( mcMain.x > hitBlock.x - 25 && mcMain.x < hitBlock.x + 25 )
			{
				if(  hitBlock + "123" == "[object Block]123" || hitBlock + "123" == "[object ToggleBlockSolid]123" || hitBlock + "123" == "[object Block_Key]123" )
				{
					mcMain.y = hitBlock.y - 25;
					jumpSpeed = 7;
					mainJumping = false;
					mainOnGround = true;
					break;
				}
			}
			else
			{
				mainJumping = true;
				mainOnGround = false;
			}
		}
	}
	testMainOnSwitch();
}	
function attemptBurrow()
{
	if( mcMain.y <= stage.height - 75 )
	{
		if( lvlArrayTemp[ currentLevel ][ (int) ( Math.floor( mcMain.y / 25 ) + 2 ) ][ (int) ( Math.floor( mcMain.x / 25 ) ) ] == 00 && lvlArrayTemp[ currentLevel ][ (int) ( Math.floor( mcMain.y / 25 ) + 2 ) ][ (int) ( Math.ceil( mcMain.x / 25 ) ) ] == 00 )
		{
			mcMain.y += 20;
		}
	}
	//else if( lvlArrayTemp[ currentLevel ][ (int) ( Math.floor( mcMain.y / 25 ) + 2 ) ][ (int) ( Math.floor( mcMain.x / 25 ) ) ] == T1 && lvlArrayTemp[ currentLevel ][ (int) ( Math.floor( mcMain.y / 25 ) + 2 ) ][ (int) ( Math.ceil( mcMain.x / 25 ) ) ] == T1 )
	//{
	//	mcMain.y += 30;
	//}
}
function testMainOnSwitch():Boolean
{
	var blockHolderLength = blockHolder.numChildren;
	var output:Boolean = false;
	if( mainOnSwitch == true )
	{
		output = false;
		mainOnSwitch = false;
		var hitTestArrayOutput:Array = new Array( blockHolderLength );
		for(var k:int = 0;k<blockHolderLength; k++) // right
		{
			var hitBlock1:DisplayObject = blockHolder.getChildAt(k);
			if( mcMain.hitTestObject( hitBlock1 ) == true && hitBlock1 + "123" == "[object Switch]123" )
			{
				hitTestArrayOutput[ k ] = true;
			}
			else
			{
				hitTestArrayOutput[ k ] = false;
			}
			if( hitTestArrayOutput[ k ] == true )
			{
				output = false;
				mainOnSwitch  = true;
			}
		}
	}
	else if( mainOnSwitch == false )
	{
		for(var i:int = 0;i<blockHolderLength; i++) // right
		{
			var hitBlock:DisplayObject = blockHolder.getChildAt(i);
			if( mcMain.hitTestObject( hitBlock ) == true && hitBlock + "123" == "[object Switch]123" )
			{
				output = true;
				mainOnSwitch = true;
			}
		}
	}
	return output;
}
//listening for the keystrokes
//this listener will listen for down keystrokes
stage.addEventListener(KeyboardEvent.KEY_DOWN, checkKeysDown);
function checkKeysDown(event:KeyboardEvent):void{
	//making the booleans true based on the keycode
	//WASD Keys or arrow keys
	if(event.keyCode == 37 || event.keyCode == 65){
		leftKeyDown = true;
		main.play();
	}
	if(event.keyCode == 38 || event.keyCode == 87 && mainIsPaused == false){
		upKeyDown = true;
	}
	if(event.keyCode == 39 || event.keyCode == 68){
		rightKeyDown = true;
		main.play();
	}
	if(event.keyCode == 40 || event.keyCode == 83){
		downKeyDown = true;
	}
	if( event.keyCode == 82 )
	{
		destroyLevel();
		createLvl();
	}
}
//this listener will listen for keys being released
stage.addEventListener(KeyboardEvent.KEY_UP, checkKeysUp);
function checkKeysUp(event:KeyboardEvent):void{
	//making the booleans false based on the keycode
	if(event.keyCode == 37 || event.keyCode == 65){
		leftKeyDown = false;
		mainFacingDirection = -1;
	}
	else if(event.keyCode == 39 || event.keyCode == 68){
		rightKeyDown = false;
		mainFacingDirection = 1;
	}
	if(event.keyCode == 38 || event.keyCode == 87){
		mainIsPaused = false;
		upKeyDown = false;
	}
	if(event.keyCode == 40 || event.keyCode == 83){
		downKeyDown = false;
	}
	if( leftKeyDown == false && rightKeyDown == false )
	{
		main.stop();
	}
}
//jumping function
function mainJump():void{
	//if main isn't already jumping
	if(mainJumping == false && mainIsPaused == false){
		//then start jumping
		mainJumping = true;
		jumpSpeed = jumpSpeedLimit*gravityCoefficient;
		mcMain.y += jumpSpeed;
	} else {
		//then continue jumping if already in the air
		//crazy math that I won't explain
		if(jumpSpeed <= 0){
			jumpSpeed *= 1 - jumpSpeedLimit/125;
			if(jumpSpeed > -jumpSpeedLimit/5){
				jumpSpeed *= -1;
			}
		}
		if(jumpSpeed > 0 && jumpSpeed <= jumpSpeedLimit){
			jumpSpeed *= 1 + jumpSpeedLimit/50;
		}
		mcMain.y += jumpSpeed;
		
		//if main hits a block, then stop jumping
		//this loop will check a hit test with any block
		for(var i:int = 0;i<blockHolder.numChildren; i++){
			//getting the current block
			var hitBlock:DisplayObject = blockHolder.getChildAt(i);
			//checking hit test
			if(mcMain.y < hitBlock.y - 15 && mcMain.y > hitBlock.y - 25 )
			{
				if( hitBlock + " " == "[object Block] " || hitBlock + " " == "[object ToggleBlockSolid] ")
				{
					if( mcMain.x < hitBlock.x + 25 && mcMain.x > hitBlock.x - 25 )
					{
						//if main is falling down
						if(jumpSpeed > 0)
						{
							//stop jumping
							mainJumping = false;
							//and set the guys coordinates to be on top of the block
							mcMain.y = hitBlock.y - 25;
							//he's on solid ground
							mainOnGround = true;
							//break out of the loop
							//break;
						} 
					}
				}
			}
			if( mcMain.x < hitBlock.x + 20 && mcMain.x > hitBlock.x - 20 )
			{
				if( hitBlock + " " == "[object Block] " || hitBlock + " " == "[object ToggleBlockSolid] ")
				{
					if( mcMain.y > hitBlock.y + 10 && mcMain.y < hitBlock.y + 25 )
					{
						jumpSpeed = Math.abs(jumpSpeed);
					}
				}
			}
		}
	}
}
function destroyLevel():void
{
	if( blockHolder.numChildren > 0 )
	{
		blockHolder.removeChildren( 0, blockHolder.numChildren - 1 );
	}
	if( decorHolder.numChildren > 0 )
	{
		decorHolder.removeChildren( 0, decorHolder.numChildren - 1 );
	}
	if( lightHolder.numChildren > 0 )
	{
		lightHolder.removeChildren( 0, lightHolder.numChildren - 1 );
	}
}
function createLvl():void
{
	amtOfKeys = 0;
	hasBurrow = false;
	updateUI();
	lvlArrayTemp = lvlArray;
	indexToRebuild = new Array();
	for(var i:int = 0; i < lvlArray[ currentLevel ].length; i++)
	{
		for(var j:int = 0; j < lvlArray[ currentLevel ][ i ].length; j++ )
		{
			if( lvlArray[ currentLevel ][ i ][ j ] == B0 )
			{
				var newBlock:Block = new Block();
				newBlock.x = j * 25;
				newBlock.y = i * 25;
				blockHolder.addChild( newBlock );
				
			}
			else if( lvlArray[ currentLevel ][ i ][ j ] == BK )
			{
				var newBlockKey:Block_Key = new Block_Key();
				newBlockKey.x = j * 25;
				newBlockKey.y = i * 25;
				blockHolder.addChild( newBlockKey );
			}
			else if( lvlArray[ currentLevel ][ i ][ j ] == E0 )
			{
				var newExit:Exit = new Exit();
				newExit.x = j * 25;
				newExit.y = i * 25;
				blockHolder.addChild( newExit );
				
			}
			else if( lvlArray[ currentLevel ][ i ][ j ] == WR )
			{
				var newWireRed:WireRed = new WireRed();
				newWireRed.x = j * 25;
				newWireRed.y = i * 25;
				blockHolder.addChild( newWireRed );
			}
			else if( lvlArray[ currentLevel ][ i ][ j ] == X0 )
			{
				mcMain.x = j * 25;
				mcMain.y = i * 25;
			}
			else if( lvlArray[ currentLevel ][ i ][ j ] == P0 )
			{
				var newBurrow:PowerUpBurrow = new PowerUpBurrow();
				newBurrow.play();
				newBurrow.x = j * 25;
				newBurrow.y = i * 25;
				blockHolder.addChild( newBurrow );
			}
			else if( lvlArray[ currentLevel ][ i ][ j ] == IK )
			{
				var newItemKey:Item_Key = new Item_Key();
				newItemKey.x = j * 25;
				newItemKey.y = i * 25;
				blockHolder.addChild( newItemKey );
			}
			else if( lvlArray[ currentLevel ][ i ][ j ] == S0 )
			{
				var newSwitch:Switch = new Switch();
				newSwitch.x = j * 25;
				newSwitch.y = i * 25;
				blockHolder.addChild( newSwitch );
			}
			else if( lvlArray[ currentLevel ][ i ][ j ] == Z0 )
			{
				var newSecretExit:SecretExit = new SecretExit();
				newSecretExit.x = j * 25;
				newSecretExit.y = i * 25;
				blockHolder.addChild( newSecretExit );
			}
			else if( lvlArray[ currentLevel ][ i ][ j ] == D0 )
			{
				var newScaffold:Decoration_Scaffold = new Decoration_Scaffold();
				newScaffold.x = j * 25;
				newScaffold.y = i * 25;
				decorHolder.addChild( newScaffold );
			}
			else if( lvlArray[ currentLevel ][ i ][ j ] == D1 )
			{
				var newSconce:Decoration_Sconce = new Decoration_Sconce();
				newSconce.x = j * 25;
				newSconce.y = i * 25;
				decorHolder.addChild( newSconce );
				var newLightCircle:Light_Circle = new Light_Circle();
				newLightCircle.x = j * 25;
				newLightCircle.y = i * 25;
				lightHolder.addChild( newLightCircle );
			}
			else if( lvlArray[ currentLevel ][ i ][ j ] == T0 )
			{
				var newToggleSolid:ToggleBlockSolid = new ToggleBlockSolid();
				//gives the block a unique name
				newToggleSolid.name = "ToggleBlockSolid" + i + "i" + j;
				newToggleSolid.x = j * 25;
				newToggleSolid.y = i * 25;
				blockHolder.addChild( newToggleSolid );
				//adds the block to an array so it can toggle its state
				indexToRebuild.push( blockHolder.getChildIndex(blockHolder.getChildByName("ToggleBlockSolid" + i + "i" + j) ) );
			}
			else if( lvlArray[ currentLevel ][ i ][ j ] == T1 )
			{
				var newTogglePhase:ToggleBlockPhase = new ToggleBlockPhase();
				//gives the block a unique name
				newTogglePhase.name = "ToggleBlockPhase" + i + "x" + j;
				newTogglePhase.x = j * 25;
				newTogglePhase.y = i * 25;
				blockHolder.addChild( newTogglePhase );
				//adds the block to an array so it can toggle its state
				indexToRebuild.push( blockHolder.getChildIndex( blockHolder.getChildByName("ToggleBlockPhase" + i + "x" + j) ) );
			}
		}
	}	
}
function rebuildLevelFromTemp()
{
	trace( pointsToRebuild );
	trace( indexToRebuild );
	indexToRebuildTemp = new Array();
	var xCoord:int;
	var yCoord:int;
	for( var j:int = 0; j < indexToRebuild.length; j++ )
	{
		var xIndex:int = pointsToRebuild[ j ][ 1 ];
		var yIndex:int = pointsToRebuild[ j ][ 0 ];
		xCoord = xIndex * 25;
		yCoord = yIndex * 25;
		var string:String = blockHolder.getChildAt( indexToRebuild[ j ] ) + "123";
		if( string.indexOf( "ToggleBlockPhase" ) != -1 ) 
		{
			blockHolder.removeChildAt( indexToRebuild[ j ] );
			var newToggleSolid:ToggleBlockSolid = new ToggleBlockSolid();
			newToggleSolid.name = "ToggleBlockSolid" + j;
			newToggleSolid.x = xCoord;
			newToggleSolid.y = yCoord;
			blockHolder.addChildAt( newToggleSolid, indexToRebuild[ j ] );
			indexToRebuildTemp.push( j );
		}
		else if( string.indexOf( "ToggleBlockSolid" ) != -1 ) 
		{
			blockHolder.removeChildAt( indexToRebuild[ j ] );
			var newTogglePhase:ToggleBlockPhase = new ToggleBlockPhase();
			newTogglePhase.name = "ToggleBlockPhase" + j;
			newTogglePhase.x = xCoord;
			newTogglePhase.y = yCoord;
			blockHolder.addChildAt( newTogglePhase, indexToRebuild[ j ] );
			//indexToRebuildTemp.push( j );
		}
	}
	//indexToRebuild = indexToRebuildTemp;
}
function updateUI() //keeps the ui updated every time something changes in it
{
	keyCountField.text = "x" + amtOfKeys;
	uiBurrowItem.visible = hasBurrow;
}
function startGame(event:MouseEvent)
{
	splashHolder.visible = false;
	splashScreenGroup.visible = false;
	timerPaused = false;
}
//build the UI
var uiBurrowItem:PowerUpBurrow = new PowerUpBurrow();
uiBurrowItem.x = 50;
uiBurrowItem.y = 5;
uiHolder.addChild( uiBurrowItem );
var uiKeyItem:Item_Key = new Item_Key();
uiKeyItem.x = 5;
uiKeyItem.y = 5;
uiHolder.addChild( uiKeyItem );
//running the createlvl funciton
main.stop();
createLvl();
